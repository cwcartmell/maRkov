zeroes <- cfunction(c(n_ = "integer"), '#
  int n = asInteger(n_);#
#
  SEXP out = PROTECT(allocVector(INTSXP, n));#
  memset(INTEGER(out), 0, n * sizeof(int));#
  UNPROTECT(1);#
#
  return out;#
')
install.packages("inline")
install.packages("pryr")
#include <R.h>#
#include <Rinternals.h>#
#
SEXP add(SEXP a, SEXP b) {#
  SEXP result = PROTECT(allocVector(REALSXP, 1));#
  REAL(result)[0] = asReal(a) + asReal(b);#
  UNPROTECT(1);#
#
  return result;#
}
add <- function(a, b) {#
  .Call("add", a, b)#
}
add(2,5)
add <- cfunction(c(a = "integer", b = "integer"), "#
  SEXP result = PROTECT(allocVector(REALSXP, 1));#
  REAL(result)[0] = asReal(a) + asReal(b);#
  UNPROTECT(1);#
#
  return result;#
")#
add(1, 5)
library(incline)
library(inline)
add <- cfunction(c(a = "integer", b = "integer"), "#
  SEXP result = PROTECT(allocVector(REALSXP, 1));#
  REAL(result)[0] = asReal(a) + asReal(b);#
  UNPROTECT(1);#
#
  return result;#
")#
add(1, 5)
#include <R.h>#
#include <Rinternals.h>
add <- cfunction(c(a = "integer", b = "integer"), "#
  SEXP result = PROTECT(allocVector(REALSXP, 1));#
  REAL(result)[0] = asReal(a) + asReal(b);#
  UNPROTECT(1);#
#
  return result;#
")#
add(1, 5)
q()
install.packages("rcpp")
install.packages("Rcpp")
8.2/2.54
30.1/2.54
30.1/2.54/4
q()
1+2
q()
10^4
10^-4
.0007
q()
5000
5000/24
5000/24/60
q()
10^6
100000/10^5
1000000/10^5
1000000/10^6
factorial(12)
factorial(12)/10^6
factorial(12)/10^6/2.75
q()
factorial(20)
q()
epil {MASS}
lead(epil)
load(epil)
summary(glm(y ~ lbase*trt + lage + V4, family = poisson,#
            data = epil), cor = FALSE)
library(mass)
library(MASS)
library(Mass)
q()
1+2
q()
169/300
419/800
q()
n=1000
d=matrix(0,n,2)#
for(i in 1 :n){ d[i,]=sort(runif(2)) }#
#
A=matrix(0,n,n)#
for(i in 1:n) for (j in 1:n) if(d[i,2] <= d[j,1]) A[i,j]=1#
#
#
#
nulldist= nulldistribution(n, numnull)#
#
######
#
#
x=rep(0,n)#
for(i in 1:n) x[i] =  mean(d[i,])#
#
#
######
#
## Do it for null#
#
#
#
for(k0 in 1:m0){#
#
#
y=rnorm(n)#
#
#
#
yranks=rank(y)#
meanranks = mean(yranks)#
sumsqrsdata = sum((yranks-meanranks)^2)#
numpoints = length(y)
#
#
# Input is partialorder, given by an adjacency matrix#
#
gettoposort<-function ( partialorder ) {#
#
# Returns a random topological sorting given the partial order #
# Also returns the ranks of each element in the linear extension#
# Also returns the probability of producing that vector#
#
numpoints = dim(partialorder)[1]#
probability = 1#
#
sortedvector = rep(0,numpoints)#
rankedvector = rep(0,numpoints)#
#
# Calculate the in-degrees of each node#
indegree = colSums(partialorder) #
#
for(i in 1:numpoints){#
#
    # Select a random node with indegree = 0#
#
    possiblevertices = which(indegree == 0)#
#
    x = floor(runif(1)*length(possiblevertices))+1#
#
    # multiply probability by 1 / number of possible indices to select#
    #
    probability = probability / length(possiblevertices);#
    #
    sortedvector[i] = possiblevertices[x] #
#
    # ith position in partial order is selected node#
#
    rankedvector[possiblevertices[x]] = i#
#
    # rank of selected node is i#
#
    indegree[possiblevertices[x]] = -1#
    #
    # Decrement all vertices with edges from the selected node to them#
#
    indegree = indegree - partialorder[possiblevertices[x],]#
    #
}#
#
list(sortedvector, rankedvector, probability)#
#
}
}
d=matrix(0,n,2)#
for(i in 1 :n){ d[i,]=sort(runif(2)) }#
#
A=matrix(0,n,n)#
for(i in 1:n) for (j in 1:n) if(d[i,2] <= d[j,1]) A[i,j]=1#
#
#
#
nulldist= nulldistribution(n, numnull)#
#
######
#
#
x=rep(0,n)#
for(i in 1:n) x[i] =  mean(d[i,])#
#
#
######
#
## Do it for null#
#
#
#
for(k0 in 1:m0){#
#
#
y=rnorm(n)#
#
#
#
yranks=rank(y)#
meanranks = mean(yranks)#
sumsqrsdata = sum((yranks-meanranks)^2)#
numpoints = length(y)
}
#
#
#
# Input is partialorder, given by an adjacency matrix#
#
gettoposort<-function ( partialorder ) {#
#
# Returns a random topological sorting given the partial order #
# Also returns the ranks of each element in the linear extension#
# Also returns the probability of producing that vector#
#
numpoints = dim(partialorder)[1]#
probability = 1#
#
sortedvector = rep(0,numpoints)#
rankedvector = rep(0,numpoints)#
#
# Calculate the in-degrees of each node#
indegree = colSums(partialorder) #
#
for(i in 1:numpoints){#
#
    # Select a random node with indegree = 0#
#
    possiblevertices = which(indegree == 0)#
#
    x = floor(runif(1)*length(possiblevertices))+1#
#
    # multiply probability by 1 / number of possible indices to select#
    #
    probability = probability / length(possiblevertices);#
    #
    sortedvector[i] = possiblevertices[x] #
#
    # ith position in partial order is selected node#
#
    rankedvector[possiblevertices[x]] = i#
#
    # rank of selected node is i#
#
    indegree[possiblevertices[x]] = -1#
    #
    # Decrement all vertices with edges from the selected node to them#
#
    indegree = indegree - partialorder[possiblevertices[x],]#
    #
}#
#
list(sortedvector, rankedvector, probability)#
#
}
cosmesis = gettoposort( A )
dim(A)
ran= cosmesis[[2]]#
full=ran#
u=v=seq(1:n)#
v[full]=u
#
#
## one possible order is v, arrange nodes according to this rankings#
#
vin=u#
for (i in 1:n) vin[i]=which(v==i)#
A0=matrix(0,n,n)#
for(i in 1:n) for(j in 1:n) if(A[i,j]==1) A0[full[i],full[j]]=1#
#
### initialize perfect MCMC
rsim=1
#
L=1#
R=rep(n,n)#
#
Ln=L#
Rn=R#
B= (1/pi)*(n^3)*log(n)#
#
#
index=1#
ilist = floor(runif(B)*(n -1))+1#
jlist = rbinom(B,1,1/2)
B
floor(runif(B)*(n -1))+1
n
runif(B)
q()
825*6
3*2 +6 +10
22*3
22*3+50
22+72+16
110*250
110*250*.15
110*.15
325*3
6+6 +10
6+6 +10+6
28+22+78
128*.15
150*250
q()
250*50
q()
36*3
q()
37500+1600
3000*.46
3500*.46
3200*.46
q()
5500*.35
0
5000*.35
750*15
350*6
q()
10000+7500+3000+4500+2000+3000+5000+1750
10000+7500+3000+4500+2000+3000
q()
150*15
150*10
2000/150
3000/150
q()
25*40
q()
hist(trees$Height, col="burlywood",#
     xlab="Height (feet)",#
     main="Heights of Black Cherry Trees")
par(mgp=c(1.9,.7,0), mar=c(3,3,2,1), lend=1, ljoin=1, lmitre=4)#
#
hist(trees$Height, col="burlywood",#
     xlab="Height (feet)",#
     main="Heights of Black Cherry Trees")
q()
help(pie)
require(grDevices)#
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)#
names(pie.sales) <- c("Blueberry", "Cherry",#
    "Apple", "Boston Cream", "Other", "Vanilla Cream")
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)#
names(pie.sales) <- c("Blueberry", "Cherry",#
    "Apple", "Boston Cream", "Other", "Vanilla Cream")#
pie(pie.sales) # default colours#
pie(pie.sales, col = c("purple", "violetred1", "green3",#
                       "cornsilk", "cyan", "white"))
q()
help(bar)
help(barchart)
help(barplot)
mp <- barplot(VADeaths) # default#
tot <- colMeans(VADeaths)#
text(mp, tot + 3, format(tot), xpd = TRUE, col = "blue")#
barplot(VADeaths, beside = TRUE,#
        col = c("lightblue", "mistyrose", "lightcyan",#
                "lavender", "cornsilk"),#
        legend = rownames(VADeaths), ylim = c(0, 100))#
title(main = "Death Rates in Virginia", font.main = 4)
require(grDevices)  pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)  names(pie.sales) <- c("Blueberry", "Cherry",      "Apple", "Boston Cream", "Other", "Vanilla Cream")  pie(pie.sales, col = c("purple", "violetred1", "green3",                         "cornsilk", "cyan", "white"))
barplot(pie.sales)
require(grDevices)#
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)#
#
names(pie.sales) <- c("Blueberry", "Cherry",    "Apple", "Boston Cream", "Other", "Vanilla Cream")#
#
#
barplot(pie.sales, col = c("purple", "violetred1", "green3",                       "cornsilk", "cyan", "white"))
y=c(1, 	0, 	1, 	0, 	0, 	2,	0, 	1, 	1, 	1, 	2, 	1, 	0, 	0, 	1, 	1,  0, 	1, 	1, 	1, 	1, 	0,#
 	0, 	0,  1, 	1, 	2, 	0, 	1, #
	2, 	2, 	1, 	1, 	0, 	2, 	1, 	1, 	0, 	1, 	5, 	0, 	3, 	0, 	1, 	1, 	0, 	0)
y
y=c(1, 0, 1, 0, 0, 2,0, 1, 1, 1, 2, 1, 0, 0, 	1, 1,  0, 1, 1, 1, 1, 0,0, 0, 1,1, 2, 0,	1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 1, 5, 0, 3, 0, 1, 1, 0, 0)
hist(y)
table(y)
table(y, br=6)
table(y, br=5)
hist(y, br=5)
hist(y, br=6)
hist(y, br=7)
help(hist)
hist(y, breaks=7)
hist(y, breaks=c(0,1,2,3,4,5,6,7))
hist(y, breaks=c(.5,1.5,2.5,3.5,4.5,5.5,6.5,7.5))
max(y)
hist(y, breaks=c(.5,1.5,2.5,3.5,4.5,5.5))
hist(y, breaks=c(-.5,.5,1.5,2.5,3.5,4.5,5.5))
help(hist)
hist(y, breaks=c(-.5,.5,1.5,2.5,3.5,4.5,5.5), col="gray")
y
hist(y, breaks=c(-.5,.5,1.5,2.5,3.5,4.5,5.5), col="gray")
table(y)
require(grDevices)#
#
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)#
#
names(pie.sales) <- c("Blueberry", "Cherry",#
    "Apple", "Boston Cream", "Other", "Vanilla Cream")#
#
#
pie(pie.sales, col = c("purple", "violetred1", "green3",#
                       "cornsilk", "cyan", "white"))
#
require(grDevices)#
#
pie.sales <- c(0.12, 0.3, 0.26, 0.16, 0.04, 0.12)#
#
names(pie.sales) <- c("Blueberry", "Cherry",#
    "Apple", "Boston Cream", "Other", "Vanilla Cream")#
#
#
barplot(pie.sales, col = c("purple", "violetred1", "green3",#
                       "cornsilk", "cyan", "white"))
y=c(1, 0, 1, 0, 0, 2,0, 1, 1, 1, 2, 1, 0, 0, 	1, 1,  0, 1, 1, 1, 1, 0,0, 0, 1,1, 2, 0,	1, 2, 2, 1, 1, 0, 2, 1, 1, 0, 1, 5, 0, 3, 0, 1, 1, 0, 0)
hist(y, breaks=c(-.5,.5,1.5,2.5,3.5,4.5,5.5), col="gray")
table(y)
hist(y, breaks=c(-.5,.5,1.5,2.5,3.5,4.5,5.5), col="gray")
q()
ob=c(37,35,40,32)
sum(ob)
ex=144/4
ex
(ob-ex)^2
(ob-ex)^2/ex
sum((ob-ex)^2/ex)
q()
choose(10,2)
choose(10,2)
theta
theta=.03
choose(10,2)*theta^8*(1-theta)^137
choose(145,8)*theta^8*(1-theta)^137
theta=c(.03,.04,.05,.06)
choose(145,8)*theta^8*(1-theta)^137
help(rbinom)
qbinom(8,145,.03)
dbinom(8,145,.03)
qbinom(8,145,.03)
qbinom(0,145,.03)
qbinom(1,145,.03)
dbinom(1,145,.03)
dbinom(0,145,.03)
pbinom(0,145,.03)
pbinom(8,145,.03)
1-pbinom(8,145,.03)
1-pbinom(7,145,.03)
1-pbinom(7,145 theta)
1-pbinom(7,145,theta)
pr=c(0.23,0.21,0.28,0.28)
pr
tail=1-pbinom(7,145,theta)
tail
tail*pr
sum(tail*pr)
pr0=(.5,.167,.167,.167)
pr0=c(.5,.167,.167,.167)
sum(tail*pr0)
install.packages("devtools")
devtools::load_all()
y=c(52,53,55,56,56,56,58,60,60,61,62,62,63,65,66,67,67,68,68,68,70,71,71,72,72, 74,75,77,77,79,81)
length(y)
mean(y)
y=c(52,53,55,56,56,56,58,60,60,61,62,62,63,65,66,67,67,68,68,68,70,71,71,72,72, 74,76,77,77,79,81)
mean(y)
median(y)
table(y)
y
y-mean(y)
round(y-mean(y),2)
round((y-mean(y))^2,2)
sum((y-mean(y))^2,2)
var(y)
sum((y-mean(y))^2,2)/30
\
sd(y)
16
mean(y)
mean(y)+sd(y)
mean(y)-sd(y)
mean(y)-2*sd(y)
mean(y) +2*sd(y)
summary(y)
mean(y) +2*sd(y)
mean(y) -2*sd(y)
hist(y)
boxplot(y)
x
x=c(0,0,1,2,63,61,27,13)
summary(x)
boxplot(x)
x
sort(x)
27+61
(27+61)/2
median(c(0,0,1,2,7.5))
x
fivenum(x)
summary(x)
hist(x)
hist(x, br=6)
fivenum(x)
x
sd(x)
x
mean(x)
x
mean(x)
sd(x)
fivenum(x)
boxplot(x)
999*26*3*52
1/999*26*3*52
1/(999*26*3*52)
q()
