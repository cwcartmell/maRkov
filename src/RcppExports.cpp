// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// i_dim_sum
int i_dim_sum(std::vector<std::vector<std::vector<int> > > n, int j, int k);
RcppExport SEXP maRkov_i_dim_sum(SEXP nSEXP, SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(i_dim_sum(n, j, k));
    return __result;
END_RCPP
}
// j_dim_sum
int j_dim_sum(std::vector<std::vector<std::vector<int> > > n, int i, int k);
RcppExport SEXP maRkov_j_dim_sum(SEXP nSEXP, SEXP iSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    __result = Rcpp::wrap(j_dim_sum(n, i, k));
    return __result;
END_RCPP
}
// k_dim_sum
int k_dim_sum(std::vector<std::vector<std::vector<int> > > n, int i, int j);
RcppExport SEXP maRkov_k_dim_sum(SEXP nSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    __result = Rcpp::wrap(k_dim_sum(n, i, j));
    return __result;
END_RCPP
}
// ik_dim_sum
int ik_dim_sum(std::vector<std::vector<std::vector<int> > > n, int j);
RcppExport SEXP maRkov_ik_dim_sum(SEXP nSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    __result = Rcpp::wrap(ik_dim_sum(n, j));
    return __result;
END_RCPP
}
// jk_dim_sum
int jk_dim_sum(std::vector<std::vector<std::vector<int> > > n, int i);
RcppExport SEXP maRkov_jk_dim_sum(SEXP nSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    __result = Rcpp::wrap(jk_dim_sum(n, i));
    return __result;
END_RCPP
}
// vec_greater_than
int vec_greater_than(NumericVector testStats);
RcppExport SEXP maRkov_vec_greater_than(SEXP testStatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type testStats(testStatsSEXP);
    __result = Rcpp::wrap(vec_greater_than(testStats));
    return __result;
END_RCPP
}
// swap_mult
std::vector<std::vector<int> > swap_mult(std::vector<std::vector<int> > bin_chains, int m);
RcppExport SEXP maRkov_swap_mult(SEXP bin_chainsSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    __result = Rcpp::wrap(swap_mult(bin_chains, m));
    return __result;
END_RCPP
}
// multiple_metropolis
std::vector<std::vector<std::vector<int> > > multiple_metropolis(IntegerMatrix bin_chains, int m, int b);
RcppExport SEXP maRkov_multiple_metropolis(SEXP bin_chainsSEXP, SEXP mSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerMatrix >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(multiple_metropolis(bin_chains, m, b));
    return __result;
END_RCPP
}
// n_counts_multiple
std::vector<std::vector<std::vector<int> > > n_counts_multiple(std::vector<std::vector<int> > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_n_counts_multiple(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(n_counts_multiple(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// u6_test_stat
long double u6_test_stat(std::vector<std::vector<int> > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_u6_test_stat(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(u6_test_stat(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// multiple_chi_sq_test_stat
long double multiple_chi_sq_test_stat(std::vector<std::vector<int> > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_multiple_chi_sq_test_stat(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(multiple_chi_sq_test_stat(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// multiple_indicate_run
bool multiple_indicate_run(std::vector<int> binChain, int p, int i);
RcppExport SEXP maRkov_multiple_indicate_run(SEXP binChainSEXP, SEXP pSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type binChain(binChainSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    __result = Rcpp::wrap(multiple_indicate_run(binChain, p, i));
    return __result;
END_RCPP
}
// multiple_run_test_stat
long double multiple_run_test_stat(std::vector<std::vector<int> > bin_chains, int p);
RcppExport SEXP maRkov_multiple_run_test_stat(SEXP bin_chainsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(multiple_run_test_stat(bin_chains, p));
    return __result;
END_RCPP
}
// u6_test_stat_array
NumericVector u6_test_stat_array(std::vector<std::vector<std::vector<int> > > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_u6_test_stat_array(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(u6_test_stat_array(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// multiple_chi_sq_test_stat_array
NumericVector multiple_chi_sq_test_stat_array(std::vector<std::vector<std::vector<int> > > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_multiple_chi_sq_test_stat_array(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(multiple_chi_sq_test_stat_array(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// multiple_run_test_stat_array
NumericVector multiple_run_test_stat_array(std::vector<std::vector<std::vector<int> > > bin_chains, int p);
RcppExport SEXP maRkov_multiple_run_test_stat_array(SEXP bin_chainsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<int> > > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(multiple_run_test_stat_array(bin_chains, p));
    return __result;
END_RCPP
}
// swap
std::vector<int> swap(std::vector<int> bin_chain, int m);
RcppExport SEXP maRkov_swap(SEXP bin_chainSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    __result = Rcpp::wrap(swap(bin_chain, m));
    return __result;
END_RCPP
}
// metropolis
std::vector<std::vector<int> > metropolis(IntegerVector bin_chain, int m, int b);
RcppExport SEXP maRkov_metropolis(SEXP bin_chainSEXP, SEXP mSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(metropolis(bin_chain, m, b));
    return __result;
END_RCPP
}
// n_counts
std::vector<std::vector<std::vector<int> > > n_counts(std::vector<int> bin_chain, int n_chain_uniques);
RcppExport SEXP maRkov_n_counts(SEXP bin_chainSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(n_counts(bin_chain, n_chain_uniques));
    return __result;
END_RCPP
}
// u1_test_stat
long double u1_test_stat(std::vector<int> bin_chain, int n_chain_uniques);
RcppExport SEXP maRkov_u1_test_stat(SEXP bin_chainSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(u1_test_stat(bin_chain, n_chain_uniques));
    return __result;
END_RCPP
}
// chi_sq_test_stat
long double chi_sq_test_stat(std::vector<int> bin_chain, int n_chain_uniques);
RcppExport SEXP maRkov_chi_sq_test_stat(SEXP bin_chainSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(chi_sq_test_stat(bin_chain, n_chain_uniques));
    return __result;
END_RCPP
}
// indicate_run
bool indicate_run(std::vector<int> bin_chain, int p, int i);
RcppExport SEXP maRkov_indicate_run(SEXP bin_chainSEXP, SEXP pSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    __result = Rcpp::wrap(indicate_run(bin_chain, p, i));
    return __result;
END_RCPP
}
// run_test_stat
int run_test_stat(std::vector<int> bin_chain, int p);
RcppExport SEXP maRkov_run_test_stat(SEXP bin_chainSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<int> >::type bin_chain(bin_chainSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(run_test_stat(bin_chain, p));
    return __result;
END_RCPP
}
// u1_test_stat_array
NumericVector u1_test_stat_array(std::vector<std::vector<int> > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_u1_test_stat_array(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(u1_test_stat_array(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// chi_sq_test_stat_array
NumericVector chi_sq_test_stat_array(std::vector<std::vector<int> > bin_chains, int n_chain_uniques);
RcppExport SEXP maRkov_chi_sq_test_stat_array(SEXP bin_chainsSEXP, SEXP n_chain_uniquesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type n_chain_uniques(n_chain_uniquesSEXP);
    __result = Rcpp::wrap(chi_sq_test_stat_array(bin_chains, n_chain_uniques));
    return __result;
END_RCPP
}
// run_test_stat_array
NumericVector run_test_stat_array(std::vector<std::vector<int> > bin_chains, int p);
RcppExport SEXP maRkov_run_test_stat_array(SEXP bin_chainsSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::vector<std::vector<int> > >::type bin_chains(bin_chainsSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    __result = Rcpp::wrap(run_test_stat_array(bin_chains, p));
    return __result;
END_RCPP
}
